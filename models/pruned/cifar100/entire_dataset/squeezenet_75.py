import torch
import torch.nn as nn
import torch.nn.functional as F

class SqueezeNet(nn.Module):
	def __init__(self, num_classes=10):
		super().__init__()

		self.conv1 = nn.Conv2d(3, 74, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		self.bn1 = nn.BatchNorm2d(74, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.maxpool1 = nn.MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
		self.fire2_conv1 = nn.Conv2d(74, 15, kernel_size=(1, 1), stride=(1, 1))
		self.fire2_bn1 = nn.BatchNorm2d(15, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire2_conv2 = nn.Conv2d(15, 64, kernel_size=(1, 1), stride=(1, 1))
		self.fire2_bn2 = nn.BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire2_conv3 = nn.Conv2d(15, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		self.fire2_bn3 = nn.BatchNorm2d(34, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire3_conv1 = nn.Conv2d(98, 16, kernel_size=(1, 1), stride=(1, 1))
		self.fire3_bn1 = nn.BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire3_conv2 = nn.Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
		self.fire3_bn2 = nn.BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire3_conv3 = nn.Conv2d(16, 62, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		self.fire3_bn3 = nn.BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire4_conv1 = nn.Conv2d(126, 32, kernel_size=(1, 1), stride=(1, 1))
		self.fire4_bn1 = nn.BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire4_conv2 = nn.Conv2d(32, 66, kernel_size=(1, 1), stride=(1, 1))
		self.fire4_bn2 = nn.BatchNorm2d(66, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire4_conv3 = nn.Conv2d(32, 78, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		self.fire4_bn3 = nn.BatchNorm2d(78, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.maxpool2 = nn.MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
		self.fire5_conv1 = nn.Conv2d(144, 31, kernel_size=(1, 1), stride=(1, 1))
		self.fire5_bn1 = nn.BatchNorm2d(31, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire5_conv2 = nn.Conv2d(31, 127, kernel_size=(1, 1), stride=(1, 1))
		self.fire5_bn2 = nn.BatchNorm2d(127, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire5_conv3 = nn.Conv2d(31, 53, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		self.fire5_bn3 = nn.BatchNorm2d(53, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire6_conv1 = nn.Conv2d(180, 48, kernel_size=(1, 1), stride=(1, 1))
		self.fire6_bn1 = nn.BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire6_conv2 = nn.Conv2d(48, 97, kernel_size=(1, 1), stride=(1, 1))
		self.fire6_bn2 = nn.BatchNorm2d(97, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire6_conv3 = nn.Conv2d(48, 7, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		self.fire6_bn3 = nn.BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire7_conv1 = nn.Conv2d(104, 48, kernel_size=(1, 1), stride=(1, 1))
		self.fire7_bn1 = nn.BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire7_conv2 = nn.Conv2d(48, 160, kernel_size=(1, 1), stride=(1, 1))
		self.fire7_bn2 = nn.BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire7_conv3 = nn.Conv2d(48, 59, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		self.fire7_bn3 = nn.BatchNorm2d(59, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire8_conv1 = nn.Conv2d(219, 64, kernel_size=(1, 1), stride=(1, 1))
		self.fire8_bn1 = nn.BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire8_conv2 = nn.Conv2d(64, 217, kernel_size=(1, 1), stride=(1, 1))
		self.fire8_bn2 = nn.BatchNorm2d(217, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire8_conv3 = nn.Conv2d(64, 25, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		self.fire8_bn3 = nn.BatchNorm2d(25, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.maxpool3 = nn.MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
		self.fire9_conv1 = nn.Conv2d(242, 64, kernel_size=(1, 1), stride=(1, 1))
		self.fire9_bn1 = nn.BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire9_conv2 = nn.Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))
		self.fire9_bn2 = nn.BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.fire9_conv3 = nn.Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		self.fire9_bn3 = nn.BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
		self.conv2 = nn.Conv2d(4, 100, kernel_size=(1, 1), stride=(1, 1))
		self.avg_pool = nn.AdaptiveAvgPool2d(output_size=1)
		self.softmax = nn.LogSoftmax(dim=1)

	def forward(self, x):
		x = F.relu(self.bn1(self.conv1(x)))
		x = self.maxpool1(x)
		x = F.relu(self.fire2_bn1(self.fire2_conv1(x)))
		out1x1 = self.fire2_bn2(self.fire2_conv2(x))
		out3x3 = self.fire2_bn3(self.fire2_conv3(x))
		x = F.relu(torch.cat([out1x1, out3x3], 1))
		x = F.relu(self.fire3_bn1(self.fire3_conv1(x)))
		out1x1 = self.fire3_bn2(self.fire3_conv2(x))
		out3x3 = self.fire3_bn3(self.fire3_conv3(x))
		x = F.relu(torch.cat([out1x1, out3x3], 1))
		x = F.relu(self.fire4_bn1(self.fire4_conv1(x)))
		out1x1 = self.fire4_bn2(self.fire4_conv2(x))
		out3x3 = self.fire4_bn3(self.fire4_conv3(x))
		x = F.relu(torch.cat([out1x1, out3x3], 1))
		x = self.maxpool2(x)
		x = F.relu(self.fire5_bn1(self.fire5_conv1(x)))
		out1x1 = self.fire5_bn2(self.fire5_conv2(x))
		out3x3 = self.fire5_bn3(self.fire5_conv3(x))
		x = F.relu(torch.cat([out1x1, out3x3], 1))
		x = F.relu(self.fire6_bn1(self.fire6_conv1(x)))
		out1x1 = self.fire6_bn2(self.fire6_conv2(x))
		out3x3 = self.fire6_bn3(self.fire6_conv3(x))
		x = F.relu(torch.cat([out1x1, out3x3], 1))
		x = F.relu(self.fire7_bn1(self.fire7_conv1(x)))
		out1x1 = self.fire7_bn2(self.fire7_conv2(x))
		out3x3 = self.fire7_bn3(self.fire7_conv3(x))
		x = F.relu(torch.cat([out1x1, out3x3], 1))
		x = F.relu(self.fire8_bn1(self.fire8_conv1(x)))
		out1x1 = self.fire8_bn2(self.fire8_conv2(x))
		out3x3 = self.fire8_bn3(self.fire8_conv3(x))
		x = F.relu(torch.cat([out1x1, out3x3], 1))
		x = self.maxpool3(x)
		x = F.relu(self.fire9_bn1(self.fire9_conv1(x)))
		out1x1 = self.fire9_bn2(self.fire9_conv2(x))
		out3x3 = self.fire9_bn3(self.fire9_conv3(x))
		x = F.relu(torch.cat([out1x1, out3x3], 1))
		x = self.conv2(x)
		x = self.avg_pool(x)
		x = self.softmax(x)
		return x.squeeze()

def squeezenet(**kwargs):
	return SqueezeNet(**kwargs)
